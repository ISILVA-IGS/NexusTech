"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});

var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();

var _index = require("./index");

var _index2 = _interopRequireDefault(_index);

var _fs = require("fs");

var _fs2 = _interopRequireDefault(_fs);

var _querystring = require("querystring");

var _querystring2 = _interopRequireDefault(_querystring);

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

var Dispatch = function () {
  _createClass(Dispatch, null, [{
    key: "PATH",
    get: function get() {
      return "/v0.1/dispatch";
    }
  }]);

  function Dispatch(credentials, options) {
    _classCallCheck(this, Dispatch);

    this.creds = credentials;
    this.options = options;

    // Used to facilitate testing of the call to the underlying object
    this._nexmo = this.options.nexmoOverride || _index2.default;

    this._nexmo.initialize(this.creds.apiKey, this.creds.apiSecret, this.options);
  }

  _createClass(Dispatch, [{
    key: "create",
    value: function create(template, workflow, callback) {
      var opts = arguments.length > 3 && arguments[3] !== undefined ? arguments[3] : {};

      var params = {
        template: template,
        workflow: workflow
      };

      return this.options.api.post(Dispatch.PATH, params, callback, !opts.useBasicAuth, opts.useBasicAuth, { "Content-Type": "application/json" });
    }
  }]);

  return Dispatch;
}();

exports.default = Dispatch;
module.exports = exports["default"];
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIi4uL3NyYy9EaXNwYXRjaC5qcyJdLCJuYW1lcyI6WyJEaXNwYXRjaCIsImNyZWRlbnRpYWxzIiwib3B0aW9ucyIsImNyZWRzIiwiX25leG1vIiwibmV4bW9PdmVycmlkZSIsImluaXRpYWxpemUiLCJhcGlLZXkiLCJhcGlTZWNyZXQiLCJ0ZW1wbGF0ZSIsIndvcmtmbG93IiwiY2FsbGJhY2siLCJvcHRzIiwicGFyYW1zIiwiYXBpIiwicG9zdCIsIlBBVEgiLCJ1c2VCYXNpY0F1dGgiXSwibWFwcGluZ3MiOiJBQUFBOzs7Ozs7OztBQUVBOzs7O0FBQ0E7Ozs7QUFDQTs7Ozs7Ozs7SUFFTUEsUTs7O3dCQUNjO0FBQ2hCLGFBQU8sZ0JBQVA7QUFDRDs7O0FBRUQsb0JBQVlDLFdBQVosRUFBeUJDLE9BQXpCLEVBQWtDO0FBQUE7O0FBQ2hDLFNBQUtDLEtBQUwsR0FBYUYsV0FBYjtBQUNBLFNBQUtDLE9BQUwsR0FBZUEsT0FBZjs7QUFFQTtBQUNBLFNBQUtFLE1BQUwsR0FBYyxLQUFLRixPQUFMLENBQWFHLGFBQWIsbUJBQWQ7O0FBRUEsU0FBS0QsTUFBTCxDQUFZRSxVQUFaLENBQ0UsS0FBS0gsS0FBTCxDQUFXSSxNQURiLEVBRUUsS0FBS0osS0FBTCxDQUFXSyxTQUZiLEVBR0UsS0FBS04sT0FIUDtBQUtEOzs7OzJCQUVNTyxRLEVBQVVDLFEsRUFBVUMsUSxFQUFxQjtBQUFBLFVBQVhDLElBQVcsdUVBQUosRUFBSTs7QUFDOUMsVUFBTUMsU0FBUztBQUNiSixrQkFBVUEsUUFERztBQUViQyxrQkFBVUE7QUFGRyxPQUFmOztBQUtBLGFBQU8sS0FBS1IsT0FBTCxDQUFhWSxHQUFiLENBQWlCQyxJQUFqQixDQUNMZixTQUFTZ0IsSUFESixFQUVMSCxNQUZLLEVBR0xGLFFBSEssRUFJTCxDQUFDQyxLQUFLSyxZQUpELEVBS0xMLEtBQUtLLFlBTEEsRUFNTCxFQUFFLGdCQUFnQixrQkFBbEIsRUFOSyxDQUFQO0FBUUQ7Ozs7OztrQkFHWWpCLFEiLCJmaWxlIjoiRGlzcGF0Y2guanMiLCJzb3VyY2VzQ29udGVudCI6WyJcInVzZSBzdHJpY3RcIjtcblxuaW1wb3J0IG5leG1vIGZyb20gXCIuL2luZGV4XCI7XG5pbXBvcnQgZnMgZnJvbSBcImZzXCI7XG5pbXBvcnQgcXVlcnlzdHJpbmcgZnJvbSBcInF1ZXJ5c3RyaW5nXCI7XG5cbmNsYXNzIERpc3BhdGNoIHtcbiAgc3RhdGljIGdldCBQQVRIKCkge1xuICAgIHJldHVybiBcIi92MC4xL2Rpc3BhdGNoXCI7XG4gIH1cblxuICBjb25zdHJ1Y3RvcihjcmVkZW50aWFscywgb3B0aW9ucykge1xuICAgIHRoaXMuY3JlZHMgPSBjcmVkZW50aWFscztcbiAgICB0aGlzLm9wdGlvbnMgPSBvcHRpb25zO1xuXG4gICAgLy8gVXNlZCB0byBmYWNpbGl0YXRlIHRlc3Rpbmcgb2YgdGhlIGNhbGwgdG8gdGhlIHVuZGVybHlpbmcgb2JqZWN0XG4gICAgdGhpcy5fbmV4bW8gPSB0aGlzLm9wdGlvbnMubmV4bW9PdmVycmlkZSB8fCBuZXhtbztcblxuICAgIHRoaXMuX25leG1vLmluaXRpYWxpemUoXG4gICAgICB0aGlzLmNyZWRzLmFwaUtleSxcbiAgICAgIHRoaXMuY3JlZHMuYXBpU2VjcmV0LFxuICAgICAgdGhpcy5vcHRpb25zXG4gICAgKTtcbiAgfVxuXG4gIGNyZWF0ZSh0ZW1wbGF0ZSwgd29ya2Zsb3csIGNhbGxiYWNrLCBvcHRzID0ge30pIHtcbiAgICBjb25zdCBwYXJhbXMgPSB7XG4gICAgICB0ZW1wbGF0ZTogdGVtcGxhdGUsXG4gICAgICB3b3JrZmxvdzogd29ya2Zsb3dcbiAgICB9O1xuXG4gICAgcmV0dXJuIHRoaXMub3B0aW9ucy5hcGkucG9zdChcbiAgICAgIERpc3BhdGNoLlBBVEgsXG4gICAgICBwYXJhbXMsXG4gICAgICBjYWxsYmFjayxcbiAgICAgICFvcHRzLnVzZUJhc2ljQXV0aCxcbiAgICAgIG9wdHMudXNlQmFzaWNBdXRoLFxuICAgICAgeyBcIkNvbnRlbnQtVHlwZVwiOiBcImFwcGxpY2F0aW9uL2pzb25cIiB9XG4gICAgKTtcbiAgfVxufVxuXG5leHBvcnQgZGVmYXVsdCBEaXNwYXRjaDtcbiJdfQ==